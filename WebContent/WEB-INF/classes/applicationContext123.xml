<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
			http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">



	<import resource="applicationContext.xml" />

<bean id="log" class="logService.impl.LogServiceImpl"></bean>

<aop:config>
  <aop:aspect id="aop" ref="log">
  	<aop:pointcut id="mycut" expression="execution(* service.impl.HelloServiceImpl.sayHello(..))"/>
  	<aop:before pointcut-ref="mycut" method="beforePoint"/>
  	<aop:after-returning pointcut-ref="mycut" method="afterPoint "/>
  	<aop:after-throwing pointcut-ref="mycut" method="doExceptionPoint"/>
  	<aop:after pointcut-ref="mycut" method="finallyPoint"/>
  	<aop:around pointcut-ref="mycut" method="aroundPoint"/>
  </aop:aspect>
</aop:config>
<!-- 以下为事物配置，以上为aop配置 -->
<!-- <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	<property name="dataSource" ref="dataSource"></property>
</bean>
<tx:annotation-driven transaction-manager="transactionManager"/> -->
	
<!-- 以上都是事物配置文件，在application中已经存在 -->
<!-- 以下都是定时器的配置文件 -->
	<bean id="helloService"  class="service.impl.HelloServiceImpl" autowire="byName"></bean>
 	<bean id="byeService"  class="service.impl.ByeServiceImpl" autowire="byName" ></bean>
 	
 	<!-- 创建一个工作，把byeService作为一个被调度的工作，接下来就是配置触发器调用这个工作，那么接下来就是触发这个触发器 -->
 	<bean id="byeJob" class="org.springframework.scheduling.quartz.JobDetailBean">
 		<property name="jobClass"><value>task.ByeTask</value> </property>
 		<property name="jobDataAsMap">
 			<map>
 				<entry key="byeService">
 					<ref bean="byeService"/>
 				</entry>
 			</map>
 		</property>
 	</bean>
 	<!-- Spring task 轻量级Quartz -->
 	<bean id="goodMorning"  
    class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">  
	    <property name="targetObject">  
	    	<bean class="service.GoodMorning" />  
	    </property>  
	    <property name="targetMethod" value="say" />  
	    <property name="concurrent" value="false" /><!-- 作业不并发调度 -->  
    </bean>  

	<bean id="goodMorningCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
 		<property name="jobDetail" ref="goodMorning" />
 		<property name="cronExpression" value="0 0/1 09 * * ?"></property>
 	</bean>
 	
 	<bean id="byeCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
 		<property name="jobDetail" ref="byeJob" />
 		<property name="cronExpression" value="0 0/1 17 * * ?"></property>
 	</bean>
 	
    <!-- 创建一个工作 -->
    <bean id="helloJob" class="org.springframework.scheduling.quartz.JobDetailBean">
       <!-- 指定要调度的工作，需实现Job接口，通常是继承QuartzJobBean抽象类 -->
        <property name="jobClass">
            <value>task.HelloTask</value>
        </property>
        <!-- 任务中，需要注入的属性值 -->
        <property name="jobDataAsMap">
            <map>
                <entry key="helloService">
                    <ref bean="helloService"/>
                </entry>
                <!-- 如果在一个job里面添加2个服务 -->
                <entry key="byeService">
                	<ref bean="byeService"></ref>
                </entry>
            </map>
        </property>
	</bean>
	
	<bean id="helloCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
 		<property name="jobDetail" ref="helloJob" />
 		<property name="cronExpression" value="0 0/1 15 * * ?" />
	</bean>
	
	<!-- 设置调度 -->
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
	 	<property name="triggers">
  			<list>
  				 <ref bean="helloCronTrigger" />
  				 <!-- <ref bean="byeCronTrigger"/> -->
  				 <!-- <ref bean="goodMorningCronTrigger" /> --> <!-- 轻量级quartz -->
  			</list>
	     </property>
		 <property name="taskExecutor" ref="executor" />
	</bean>
	<!-- 线程执行器配置，用于任务注册 -->
	<bean id="executor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
 		<property name="corePoolSize" value="10" />
 		<property name="maxPoolSize" value="100" />
 		<property name="queueCapacity" value="500" />
	</bean>

<!-- 定义好一个接口，然后创建一个工作，该工作调用接口。然后配置触发器，调用该工作。再配置调度，调用触发器执行 -->
</beans>